// Code generated by MockGen. DO NOT EDIT.
// Source: domain/salad.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "github.com/Mx1q/ppo_services/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockISaladRepository is a mock of ISaladRepository interface.
type MockISaladRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISaladRepositoryMockRecorder
}

// MockISaladRepositoryMockRecorder is the mock recorder for MockISaladRepository.
type MockISaladRepositoryMockRecorder struct {
	mock *MockISaladRepository
}

// NewMockISaladRepository creates a new mock instance.
func NewMockISaladRepository(ctrl *gomock.Controller) *MockISaladRepository {
	mock := &MockISaladRepository{ctrl: ctrl}
	mock.recorder = &MockISaladRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISaladRepository) EXPECT() *MockISaladRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockISaladRepository) Create(ctx context.Context, salad *domain.Salad) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, salad)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockISaladRepositoryMockRecorder) Create(ctx, salad interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockISaladRepository)(nil).Create), ctx, salad)
}

// DeleteById mocks base method.
func (m *MockISaladRepository) DeleteById(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockISaladRepositoryMockRecorder) DeleteById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockISaladRepository)(nil).DeleteById), ctx, id)
}

// GetAll mocks base method.
func (m *MockISaladRepository) GetAll(ctx context.Context, filter *domain.RecipeFilter, page int) ([]*domain.Salad, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, filter, page)
	ret0, _ := ret[0].([]*domain.Salad)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAll indicates an expected call of GetAll.
func (mr *MockISaladRepositoryMockRecorder) GetAll(ctx, filter, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockISaladRepository)(nil).GetAll), ctx, filter, page)
}

// GetAllByUserId mocks base method.
func (m *MockISaladRepository) GetAllByUserId(ctx context.Context, id uuid.UUID) ([]*domain.Salad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUserId", ctx, id)
	ret0, _ := ret[0].([]*domain.Salad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUserId indicates an expected call of GetAllByUserId.
func (mr *MockISaladRepositoryMockRecorder) GetAllByUserId(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUserId", reflect.TypeOf((*MockISaladRepository)(nil).GetAllByUserId), ctx, id)
}

// GetAllRatedByUser mocks base method.
func (m *MockISaladRepository) GetAllRatedByUser(ctx context.Context, userId uuid.UUID, page int) ([]*domain.Salad, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRatedByUser", ctx, userId, page)
	ret0, _ := ret[0].([]*domain.Salad)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllRatedByUser indicates an expected call of GetAllRatedByUser.
func (mr *MockISaladRepositoryMockRecorder) GetAllRatedByUser(ctx, userId, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRatedByUser", reflect.TypeOf((*MockISaladRepository)(nil).GetAllRatedByUser), ctx, userId, page)
}

// GetById mocks base method.
func (m *MockISaladRepository) GetById(ctx context.Context, id uuid.UUID) (*domain.Salad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*domain.Salad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockISaladRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockISaladRepository)(nil).GetById), ctx, id)
}

// Update mocks base method.
func (m *MockISaladRepository) Update(ctx context.Context, salad *domain.Salad) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, salad)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockISaladRepositoryMockRecorder) Update(ctx, salad interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockISaladRepository)(nil).Update), ctx, salad)
}

// MockISaladService is a mock of ISaladService interface.
type MockISaladService struct {
	ctrl     *gomock.Controller
	recorder *MockISaladServiceMockRecorder
}

// MockISaladServiceMockRecorder is the mock recorder for MockISaladService.
type MockISaladServiceMockRecorder struct {
	mock *MockISaladService
}

// NewMockISaladService creates a new mock instance.
func NewMockISaladService(ctrl *gomock.Controller) *MockISaladService {
	mock := &MockISaladService{ctrl: ctrl}
	mock.recorder = &MockISaladServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISaladService) EXPECT() *MockISaladServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockISaladService) Create(ctx context.Context, salad *domain.Salad) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, salad)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockISaladServiceMockRecorder) Create(ctx, salad interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockISaladService)(nil).Create), ctx, salad)
}

// DeleteById mocks base method.
func (m *MockISaladService) DeleteById(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockISaladServiceMockRecorder) DeleteById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockISaladService)(nil).DeleteById), ctx, id)
}

// GetAll mocks base method.
func (m *MockISaladService) GetAll(ctx context.Context, filter *domain.RecipeFilter, page int) ([]*domain.Salad, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, filter, page)
	ret0, _ := ret[0].([]*domain.Salad)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAll indicates an expected call of GetAll.
func (mr *MockISaladServiceMockRecorder) GetAll(ctx, filter, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockISaladService)(nil).GetAll), ctx, filter, page)
}

// GetAllByUserId mocks base method.
func (m *MockISaladService) GetAllByUserId(ctx context.Context, id uuid.UUID) ([]*domain.Salad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUserId", ctx, id)
	ret0, _ := ret[0].([]*domain.Salad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUserId indicates an expected call of GetAllByUserId.
func (mr *MockISaladServiceMockRecorder) GetAllByUserId(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUserId", reflect.TypeOf((*MockISaladService)(nil).GetAllByUserId), ctx, id)
}

// GetAllRatedByUser mocks base method.
func (m *MockISaladService) GetAllRatedByUser(ctx context.Context, userId uuid.UUID, page int) ([]*domain.Salad, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRatedByUser", ctx, userId, page)
	ret0, _ := ret[0].([]*domain.Salad)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllRatedByUser indicates an expected call of GetAllRatedByUser.
func (mr *MockISaladServiceMockRecorder) GetAllRatedByUser(ctx, userId, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRatedByUser", reflect.TypeOf((*MockISaladService)(nil).GetAllRatedByUser), ctx, userId, page)
}

// GetById mocks base method.
func (m *MockISaladService) GetById(ctx context.Context, id uuid.UUID) (*domain.Salad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*domain.Salad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockISaladServiceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockISaladService)(nil).GetById), ctx, id)
}

// Update mocks base method.
func (m *MockISaladService) Update(ctx context.Context, salad *domain.Salad) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, salad)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockISaladServiceMockRecorder) Update(ctx, salad interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockISaladService)(nil).Update), ctx, salad)
}
