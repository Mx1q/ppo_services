// Code generated by MockGen. DO NOT EDIT.
// Source: domain/ingredientType.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "github.com/Mx1q/ppo_services/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIIngredientTypeRepository is a mock of IIngredientTypeRepository interface.
type MockIIngredientTypeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIIngredientTypeRepositoryMockRecorder
}

// MockIIngredientTypeRepositoryMockRecorder is the mock recorder for MockIIngredientTypeRepository.
type MockIIngredientTypeRepositoryMockRecorder struct {
	mock *MockIIngredientTypeRepository
}

// NewMockIIngredientTypeRepository creates a new mock instance.
func NewMockIIngredientTypeRepository(ctrl *gomock.Controller) *MockIIngredientTypeRepository {
	mock := &MockIIngredientTypeRepository{ctrl: ctrl}
	mock.recorder = &MockIIngredientTypeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIngredientTypeRepository) EXPECT() *MockIIngredientTypeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIIngredientTypeRepository) Create(ctx context.Context, measurement *domain.IngredientType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, measurement)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIIngredientTypeRepositoryMockRecorder) Create(ctx, measurement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIIngredientTypeRepository)(nil).Create), ctx, measurement)
}

// DeleteById mocks base method.
func (m *MockIIngredientTypeRepository) DeleteById(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockIIngredientTypeRepositoryMockRecorder) DeleteById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockIIngredientTypeRepository)(nil).DeleteById), ctx, id)
}

// GetAll mocks base method.
func (m *MockIIngredientTypeRepository) GetAll(ctx context.Context) ([]*domain.IngredientType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*domain.IngredientType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIIngredientTypeRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIIngredientTypeRepository)(nil).GetAll), ctx)
}

// GetById mocks base method.
func (m *MockIIngredientTypeRepository) GetById(ctx context.Context, id uuid.UUID) (*domain.IngredientType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*domain.IngredientType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIIngredientTypeRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIIngredientTypeRepository)(nil).GetById), ctx, id)
}

// Update mocks base method.
func (m *MockIIngredientTypeRepository) Update(ctx context.Context, measurement *domain.IngredientType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, measurement)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIIngredientTypeRepositoryMockRecorder) Update(ctx, measurement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIIngredientTypeRepository)(nil).Update), ctx, measurement)
}

// MockIIngredientTypeService is a mock of IIngredientTypeService interface.
type MockIIngredientTypeService struct {
	ctrl     *gomock.Controller
	recorder *MockIIngredientTypeServiceMockRecorder
}

// MockIIngredientTypeServiceMockRecorder is the mock recorder for MockIIngredientTypeService.
type MockIIngredientTypeServiceMockRecorder struct {
	mock *MockIIngredientTypeService
}

// NewMockIIngredientTypeService creates a new mock instance.
func NewMockIIngredientTypeService(ctrl *gomock.Controller) *MockIIngredientTypeService {
	mock := &MockIIngredientTypeService{ctrl: ctrl}
	mock.recorder = &MockIIngredientTypeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIngredientTypeService) EXPECT() *MockIIngredientTypeServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIIngredientTypeService) Create(ctx context.Context, measurement *domain.IngredientType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, measurement)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIIngredientTypeServiceMockRecorder) Create(ctx, measurement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIIngredientTypeService)(nil).Create), ctx, measurement)
}

// DeleteById mocks base method.
func (m *MockIIngredientTypeService) DeleteById(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockIIngredientTypeServiceMockRecorder) DeleteById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockIIngredientTypeService)(nil).DeleteById), ctx, id)
}

// GetAll mocks base method.
func (m *MockIIngredientTypeService) GetAll(ctx context.Context) ([]*domain.IngredientType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*domain.IngredientType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIIngredientTypeServiceMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIIngredientTypeService)(nil).GetAll), ctx)
}

// GetById mocks base method.
func (m *MockIIngredientTypeService) GetById(ctx context.Context, id uuid.UUID) (*domain.IngredientType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*domain.IngredientType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIIngredientTypeServiceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIIngredientTypeService)(nil).GetById), ctx, id)
}

// Update mocks base method.
func (m *MockIIngredientTypeService) Update(ctx context.Context, measurement *domain.IngredientType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, measurement)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIIngredientTypeServiceMockRecorder) Update(ctx, measurement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIIngredientTypeService)(nil).Update), ctx, measurement)
}
