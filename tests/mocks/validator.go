// Code generated by MockGen. DO NOT EDIT.
// Source: domain/validator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIValidatorService is a mock of IValidatorService interface.
type MockIValidatorService struct {
	ctrl     *gomock.Controller
	recorder *MockIValidatorServiceMockRecorder
}

// MockIValidatorServiceMockRecorder is the mock recorder for MockIValidatorService.
type MockIValidatorServiceMockRecorder struct {
	mock *MockIValidatorService
}

// NewMockIValidatorService creates a new mock instance.
func NewMockIValidatorService(ctrl *gomock.Controller) *MockIValidatorService {
	mock := &MockIValidatorService{ctrl: ctrl}
	mock.recorder = &MockIValidatorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIValidatorService) EXPECT() *MockIValidatorServiceMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockIValidatorService) Verify(ctx context.Context, word string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, word)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockIValidatorServiceMockRecorder) Verify(ctx, word interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockIValidatorService)(nil).Verify), ctx, word)
}
