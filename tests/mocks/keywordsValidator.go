// Code generated by MockGen. DO NOT EDIT.
// Source: domain/keywordsValidator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "github.com/Mx1q/ppo_services/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIKeywordValidatorRepository is a mock of IKeywordValidatorRepository interface.
type MockIKeywordValidatorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIKeywordValidatorRepositoryMockRecorder
}

// MockIKeywordValidatorRepositoryMockRecorder is the mock recorder for MockIKeywordValidatorRepository.
type MockIKeywordValidatorRepositoryMockRecorder struct {
	mock *MockIKeywordValidatorRepository
}

// NewMockIKeywordValidatorRepository creates a new mock instance.
func NewMockIKeywordValidatorRepository(ctrl *gomock.Controller) *MockIKeywordValidatorRepository {
	mock := &MockIKeywordValidatorRepository{ctrl: ctrl}
	mock.recorder = &MockIKeywordValidatorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIKeywordValidatorRepository) EXPECT() *MockIKeywordValidatorRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIKeywordValidatorRepository) Create(ctx context.Context, word *domain.KeyWord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, word)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIKeywordValidatorRepositoryMockRecorder) Create(ctx, word interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIKeywordValidatorRepository)(nil).Create), ctx, word)
}

// DeleteById mocks base method.
func (m *MockIKeywordValidatorRepository) DeleteById(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockIKeywordValidatorRepositoryMockRecorder) DeleteById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockIKeywordValidatorRepository)(nil).DeleteById), ctx, id)
}

// GetAll mocks base method.
func (m *MockIKeywordValidatorRepository) GetAll(ctx context.Context) (map[string]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(map[string]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIKeywordValidatorRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIKeywordValidatorRepository)(nil).GetAll), ctx)
}

// GetById mocks base method.
func (m *MockIKeywordValidatorRepository) GetById(ctx context.Context, id uuid.UUID) (*domain.KeyWord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*domain.KeyWord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIKeywordValidatorRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIKeywordValidatorRepository)(nil).GetById), ctx, id)
}

// Update mocks base method.
func (m *MockIKeywordValidatorRepository) Update(ctx context.Context, word *domain.KeyWord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, word)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIKeywordValidatorRepositoryMockRecorder) Update(ctx, word interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIKeywordValidatorRepository)(nil).Update), ctx, word)
}

// MockIKeywordValidatorService is a mock of IKeywordValidatorService interface.
type MockIKeywordValidatorService struct {
	ctrl     *gomock.Controller
	recorder *MockIKeywordValidatorServiceMockRecorder
}

// MockIKeywordValidatorServiceMockRecorder is the mock recorder for MockIKeywordValidatorService.
type MockIKeywordValidatorServiceMockRecorder struct {
	mock *MockIKeywordValidatorService
}

// NewMockIKeywordValidatorService creates a new mock instance.
func NewMockIKeywordValidatorService(ctrl *gomock.Controller) *MockIKeywordValidatorService {
	mock := &MockIKeywordValidatorService{ctrl: ctrl}
	mock.recorder = &MockIKeywordValidatorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIKeywordValidatorService) EXPECT() *MockIKeywordValidatorServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIKeywordValidatorService) Create(ctx context.Context, word *domain.KeyWord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, word)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIKeywordValidatorServiceMockRecorder) Create(ctx, word interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIKeywordValidatorService)(nil).Create), ctx, word)
}

// DeleteById mocks base method.
func (m *MockIKeywordValidatorService) DeleteById(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockIKeywordValidatorServiceMockRecorder) DeleteById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockIKeywordValidatorService)(nil).DeleteById), ctx, id)
}

// GetAll mocks base method.
func (m *MockIKeywordValidatorService) GetAll(ctx context.Context) (map[string]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(map[string]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIKeywordValidatorServiceMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIKeywordValidatorService)(nil).GetAll), ctx)
}

// GetById mocks base method.
func (m *MockIKeywordValidatorService) GetById(ctx context.Context, id uuid.UUID) (*domain.KeyWord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*domain.KeyWord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIKeywordValidatorServiceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIKeywordValidatorService)(nil).GetById), ctx, id)
}

// Update mocks base method.
func (m *MockIKeywordValidatorService) Update(ctx context.Context, word *domain.KeyWord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, word)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIKeywordValidatorServiceMockRecorder) Update(ctx, word interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIKeywordValidatorService)(nil).Update), ctx, word)
}

// Verify mocks base method.
func (m *MockIKeywordValidatorService) Verify(ctx context.Context, word string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, word)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockIKeywordValidatorServiceMockRecorder) Verify(ctx, word interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockIKeywordValidatorService)(nil).Verify), ctx, word)
}
