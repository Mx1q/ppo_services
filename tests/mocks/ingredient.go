// Code generated by MockGen. DO NOT EDIT.
// Source: domain/ingredient.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "github.com/Mx1q/ppo_services/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIIngredientRepository is a mock of IIngredientRepository interface.
type MockIIngredientRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIIngredientRepositoryMockRecorder
}

// MockIIngredientRepositoryMockRecorder is the mock recorder for MockIIngredientRepository.
type MockIIngredientRepositoryMockRecorder struct {
	mock *MockIIngredientRepository
}

// NewMockIIngredientRepository creates a new mock instance.
func NewMockIIngredientRepository(ctrl *gomock.Controller) *MockIIngredientRepository {
	mock := &MockIIngredientRepository{ctrl: ctrl}
	mock.recorder = &MockIIngredientRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIngredientRepository) EXPECT() *MockIIngredientRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIIngredientRepository) Create(ctx context.Context, ingredient *domain.Ingredient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ingredient)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIIngredientRepositoryMockRecorder) Create(ctx, ingredient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIIngredientRepository)(nil).Create), ctx, ingredient)
}

// DeleteById mocks base method.
func (m *MockIIngredientRepository) DeleteById(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockIIngredientRepositoryMockRecorder) DeleteById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockIIngredientRepository)(nil).DeleteById), ctx, id)
}

// GetAll mocks base method.
func (m *MockIIngredientRepository) GetAll(ctx context.Context, page int) ([]*domain.Ingredient, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, page)
	ret0, _ := ret[0].([]*domain.Ingredient)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIIngredientRepositoryMockRecorder) GetAll(ctx, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIIngredientRepository)(nil).GetAll), ctx, page)
}

// GetAllByRecipeId mocks base method.
func (m *MockIIngredientRepository) GetAllByRecipeId(ctx context.Context, id uuid.UUID) ([]*domain.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByRecipeId", ctx, id)
	ret0, _ := ret[0].([]*domain.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByRecipeId indicates an expected call of GetAllByRecipeId.
func (mr *MockIIngredientRepositoryMockRecorder) GetAllByRecipeId(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByRecipeId", reflect.TypeOf((*MockIIngredientRepository)(nil).GetAllByRecipeId), ctx, id)
}

// GetById mocks base method.
func (m *MockIIngredientRepository) GetById(ctx context.Context, id uuid.UUID) (*domain.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*domain.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIIngredientRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIIngredientRepository)(nil).GetById), ctx, id)
}

// Link mocks base method.
func (m *MockIIngredientRepository) Link(ctx context.Context, recipeId, ingredientId uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Link", ctx, recipeId, ingredientId)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Link indicates an expected call of Link.
func (mr *MockIIngredientRepositoryMockRecorder) Link(ctx, recipeId, ingredientId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Link", reflect.TypeOf((*MockIIngredientRepository)(nil).Link), ctx, recipeId, ingredientId)
}

// Unlink mocks base method.
func (m *MockIIngredientRepository) Unlink(ctx context.Context, recipeId, ingredientId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlink", ctx, recipeId, ingredientId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlink indicates an expected call of Unlink.
func (mr *MockIIngredientRepositoryMockRecorder) Unlink(ctx, recipeId, ingredientId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlink", reflect.TypeOf((*MockIIngredientRepository)(nil).Unlink), ctx, recipeId, ingredientId)
}

// Update mocks base method.
func (m *MockIIngredientRepository) Update(ctx context.Context, ingredient *domain.Ingredient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, ingredient)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIIngredientRepositoryMockRecorder) Update(ctx, ingredient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIIngredientRepository)(nil).Update), ctx, ingredient)
}

// MockIIngredientService is a mock of IIngredientService interface.
type MockIIngredientService struct {
	ctrl     *gomock.Controller
	recorder *MockIIngredientServiceMockRecorder
}

// MockIIngredientServiceMockRecorder is the mock recorder for MockIIngredientService.
type MockIIngredientServiceMockRecorder struct {
	mock *MockIIngredientService
}

// NewMockIIngredientService creates a new mock instance.
func NewMockIIngredientService(ctrl *gomock.Controller) *MockIIngredientService {
	mock := &MockIIngredientService{ctrl: ctrl}
	mock.recorder = &MockIIngredientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIngredientService) EXPECT() *MockIIngredientServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIIngredientService) Create(ctx context.Context, salad *domain.Ingredient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, salad)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIIngredientServiceMockRecorder) Create(ctx, salad interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIIngredientService)(nil).Create), ctx, salad)
}

// DeleteById mocks base method.
func (m *MockIIngredientService) DeleteById(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockIIngredientServiceMockRecorder) DeleteById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockIIngredientService)(nil).DeleteById), ctx, id)
}

// GetAll mocks base method.
func (m *MockIIngredientService) GetAll(ctx context.Context, page int) ([]*domain.Ingredient, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, page)
	ret0, _ := ret[0].([]*domain.Ingredient)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIIngredientServiceMockRecorder) GetAll(ctx, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIIngredientService)(nil).GetAll), ctx, page)
}

// GetAllByRecipeId mocks base method.
func (m *MockIIngredientService) GetAllByRecipeId(ctx context.Context, id uuid.UUID) ([]*domain.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByRecipeId", ctx, id)
	ret0, _ := ret[0].([]*domain.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByRecipeId indicates an expected call of GetAllByRecipeId.
func (mr *MockIIngredientServiceMockRecorder) GetAllByRecipeId(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByRecipeId", reflect.TypeOf((*MockIIngredientService)(nil).GetAllByRecipeId), ctx, id)
}

// GetById mocks base method.
func (m *MockIIngredientService) GetById(ctx context.Context, id uuid.UUID) (*domain.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*domain.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIIngredientServiceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIIngredientService)(nil).GetById), ctx, id)
}

// Link mocks base method.
func (m *MockIIngredientService) Link(ctx context.Context, recipeId, ingredientId uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Link", ctx, recipeId, ingredientId)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Link indicates an expected call of Link.
func (mr *MockIIngredientServiceMockRecorder) Link(ctx, recipeId, ingredientId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Link", reflect.TypeOf((*MockIIngredientService)(nil).Link), ctx, recipeId, ingredientId)
}

// Unlink mocks base method.
func (m *MockIIngredientService) Unlink(ctx context.Context, recipeId, ingredientId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlink", ctx, recipeId, ingredientId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlink indicates an expected call of Unlink.
func (mr *MockIIngredientServiceMockRecorder) Unlink(ctx, recipeId, ingredientId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlink", reflect.TypeOf((*MockIIngredientService)(nil).Unlink), ctx, recipeId, ingredientId)
}

// Update mocks base method.
func (m *MockIIngredientService) Update(ctx context.Context, salad *domain.Ingredient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, salad)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIIngredientServiceMockRecorder) Update(ctx, salad interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIIngredientService)(nil).Update), ctx, salad)
}
