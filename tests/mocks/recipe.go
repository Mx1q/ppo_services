// Code generated by MockGen. DO NOT EDIT.
// Source: domain/recipe.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "github.com/Mx1q/ppo_services/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIRecipeRepository is a mock of IRecipeRepository interface.
type MockIRecipeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRecipeRepositoryMockRecorder
}

// MockIRecipeRepositoryMockRecorder is the mock recorder for MockIRecipeRepository.
type MockIRecipeRepositoryMockRecorder struct {
	mock *MockIRecipeRepository
}

// NewMockIRecipeRepository creates a new mock instance.
func NewMockIRecipeRepository(ctrl *gomock.Controller) *MockIRecipeRepository {
	mock := &MockIRecipeRepository{ctrl: ctrl}
	mock.recorder = &MockIRecipeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRecipeRepository) EXPECT() *MockIRecipeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRecipeRepository) Create(ctx context.Context, recipe *domain.Recipe) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, recipe)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIRecipeRepositoryMockRecorder) Create(ctx, recipe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRecipeRepository)(nil).Create), ctx, recipe)
}

// DeleteById mocks base method.
func (m *MockIRecipeRepository) DeleteById(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockIRecipeRepositoryMockRecorder) DeleteById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockIRecipeRepository)(nil).DeleteById), ctx, id)
}

// GetAll mocks base method.
func (m *MockIRecipeRepository) GetAll(ctx context.Context, filter *domain.RecipeFilter, page int) ([]*domain.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, filter, page)
	ret0, _ := ret[0].([]*domain.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIRecipeRepositoryMockRecorder) GetAll(ctx, filter, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIRecipeRepository)(nil).GetAll), ctx, filter, page)
}

// GetById mocks base method.
func (m *MockIRecipeRepository) GetById(ctx context.Context, id uuid.UUID) (*domain.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*domain.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIRecipeRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIRecipeRepository)(nil).GetById), ctx, id)
}

// GetBySaladId mocks base method.
func (m *MockIRecipeRepository) GetBySaladId(ctx context.Context, saladId uuid.UUID) (*domain.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySaladId", ctx, saladId)
	ret0, _ := ret[0].(*domain.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySaladId indicates an expected call of GetBySaladId.
func (mr *MockIRecipeRepositoryMockRecorder) GetBySaladId(ctx, saladId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySaladId", reflect.TypeOf((*MockIRecipeRepository)(nil).GetBySaladId), ctx, saladId)
}

// Update mocks base method.
func (m *MockIRecipeRepository) Update(ctx context.Context, recipe *domain.Recipe) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, recipe)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIRecipeRepositoryMockRecorder) Update(ctx, recipe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIRecipeRepository)(nil).Update), ctx, recipe)
}

// MockIRecipeService is a mock of IRecipeService interface.
type MockIRecipeService struct {
	ctrl     *gomock.Controller
	recorder *MockIRecipeServiceMockRecorder
}

// MockIRecipeServiceMockRecorder is the mock recorder for MockIRecipeService.
type MockIRecipeServiceMockRecorder struct {
	mock *MockIRecipeService
}

// NewMockIRecipeService creates a new mock instance.
func NewMockIRecipeService(ctrl *gomock.Controller) *MockIRecipeService {
	mock := &MockIRecipeService{ctrl: ctrl}
	mock.recorder = &MockIRecipeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRecipeService) EXPECT() *MockIRecipeServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRecipeService) Create(ctx context.Context, user *domain.Recipe) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIRecipeServiceMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRecipeService)(nil).Create), ctx, user)
}

// DeleteById mocks base method.
func (m *MockIRecipeService) DeleteById(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockIRecipeServiceMockRecorder) DeleteById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockIRecipeService)(nil).DeleteById), ctx, id)
}

// GetAll mocks base method.
func (m *MockIRecipeService) GetAll(ctx context.Context, filter *domain.RecipeFilter, page int) ([]*domain.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, filter, page)
	ret0, _ := ret[0].([]*domain.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIRecipeServiceMockRecorder) GetAll(ctx, filter, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIRecipeService)(nil).GetAll), ctx, filter, page)
}

// GetById mocks base method.
func (m *MockIRecipeService) GetById(ctx context.Context, id uuid.UUID) (*domain.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*domain.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIRecipeServiceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIRecipeService)(nil).GetById), ctx, id)
}

// GetBySaladId mocks base method.
func (m *MockIRecipeService) GetBySaladId(ctx context.Context, saladId uuid.UUID) (*domain.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySaladId", ctx, saladId)
	ret0, _ := ret[0].(*domain.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySaladId indicates an expected call of GetBySaladId.
func (mr *MockIRecipeServiceMockRecorder) GetBySaladId(ctx, saladId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySaladId", reflect.TypeOf((*MockIRecipeService)(nil).GetBySaladId), ctx, saladId)
}

// Update mocks base method.
func (m *MockIRecipeService) Update(ctx context.Context, recipe *domain.Recipe) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, recipe)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIRecipeServiceMockRecorder) Update(ctx, recipe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIRecipeService)(nil).Update), ctx, recipe)
}
