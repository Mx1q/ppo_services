// Code generated by MockGen. DO NOT EDIT.
// Source: domain/comment.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "github.com/Mx1q/ppo_services/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockICommentRepository is a mock of ICommentRepository interface.
type MockICommentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICommentRepositoryMockRecorder
}

// MockICommentRepositoryMockRecorder is the mock recorder for MockICommentRepository.
type MockICommentRepositoryMockRecorder struct {
	mock *MockICommentRepository
}

// NewMockICommentRepository creates a new mock instance.
func NewMockICommentRepository(ctrl *gomock.Controller) *MockICommentRepository {
	mock := &MockICommentRepository{ctrl: ctrl}
	mock.recorder = &MockICommentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommentRepository) EXPECT() *MockICommentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockICommentRepository) Create(ctx context.Context, comment *domain.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockICommentRepositoryMockRecorder) Create(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICommentRepository)(nil).Create), ctx, comment)
}

// DeleteById mocks base method.
func (m *MockICommentRepository) DeleteById(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockICommentRepositoryMockRecorder) DeleteById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockICommentRepository)(nil).DeleteById), ctx, id)
}

// GetAllBySaladID mocks base method.
func (m *MockICommentRepository) GetAllBySaladID(ctx context.Context, saladId uuid.UUID, page int) ([]*domain.Comment, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBySaladID", ctx, saladId, page)
	ret0, _ := ret[0].([]*domain.Comment)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllBySaladID indicates an expected call of GetAllBySaladID.
func (mr *MockICommentRepositoryMockRecorder) GetAllBySaladID(ctx, saladId, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBySaladID", reflect.TypeOf((*MockICommentRepository)(nil).GetAllBySaladID), ctx, saladId, page)
}

// GetById mocks base method.
func (m *MockICommentRepository) GetById(ctx context.Context, id uuid.UUID) (*domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockICommentRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockICommentRepository)(nil).GetById), ctx, id)
}

// GetBySaladAndUser mocks base method.
func (m *MockICommentRepository) GetBySaladAndUser(ctx context.Context, saladId, userId uuid.UUID) (*domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySaladAndUser", ctx, saladId, userId)
	ret0, _ := ret[0].(*domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySaladAndUser indicates an expected call of GetBySaladAndUser.
func (mr *MockICommentRepositoryMockRecorder) GetBySaladAndUser(ctx, saladId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySaladAndUser", reflect.TypeOf((*MockICommentRepository)(nil).GetBySaladAndUser), ctx, saladId, userId)
}

// Update mocks base method.
func (m *MockICommentRepository) Update(ctx context.Context, comment *domain.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockICommentRepositoryMockRecorder) Update(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockICommentRepository)(nil).Update), ctx, comment)
}

// MockICommentService is a mock of ICommentService interface.
type MockICommentService struct {
	ctrl     *gomock.Controller
	recorder *MockICommentServiceMockRecorder
}

// MockICommentServiceMockRecorder is the mock recorder for MockICommentService.
type MockICommentServiceMockRecorder struct {
	mock *MockICommentService
}

// NewMockICommentService creates a new mock instance.
func NewMockICommentService(ctrl *gomock.Controller) *MockICommentService {
	mock := &MockICommentService{ctrl: ctrl}
	mock.recorder = &MockICommentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommentService) EXPECT() *MockICommentServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockICommentService) Create(ctx context.Context, comment *domain.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockICommentServiceMockRecorder) Create(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICommentService)(nil).Create), ctx, comment)
}

// DeleteById mocks base method.
func (m *MockICommentService) DeleteById(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockICommentServiceMockRecorder) DeleteById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockICommentService)(nil).DeleteById), ctx, id)
}

// GetAllBySaladID mocks base method.
func (m *MockICommentService) GetAllBySaladID(ctx context.Context, saladId uuid.UUID, page int) ([]*domain.Comment, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBySaladID", ctx, saladId, page)
	ret0, _ := ret[0].([]*domain.Comment)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllBySaladID indicates an expected call of GetAllBySaladID.
func (mr *MockICommentServiceMockRecorder) GetAllBySaladID(ctx, saladId, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBySaladID", reflect.TypeOf((*MockICommentService)(nil).GetAllBySaladID), ctx, saladId, page)
}

// GetById mocks base method.
func (m *MockICommentService) GetById(ctx context.Context, id uuid.UUID) (*domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockICommentServiceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockICommentService)(nil).GetById), ctx, id)
}

// GetBySaladAndUser mocks base method.
func (m *MockICommentService) GetBySaladAndUser(ctx context.Context, saladId, userId uuid.UUID) (*domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySaladAndUser", ctx, saladId, userId)
	ret0, _ := ret[0].(*domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySaladAndUser indicates an expected call of GetBySaladAndUser.
func (mr *MockICommentServiceMockRecorder) GetBySaladAndUser(ctx, saladId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySaladAndUser", reflect.TypeOf((*MockICommentService)(nil).GetBySaladAndUser), ctx, saladId, userId)
}

// Update mocks base method.
func (m *MockICommentService) Update(ctx context.Context, user *domain.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockICommentServiceMockRecorder) Update(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockICommentService)(nil).Update), ctx, user)
}
